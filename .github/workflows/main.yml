name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  REGISTRY: docker.io
  BACKEND_IMAGE: davidh248/movie-backend
  FRONTEND_IMAGE: davidh248/movie-frontend

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Set image tag
        id: tag
        run: echo "tag=${{ github.ref == 'refs/heads/main' && 'latest' || 'develop' }}" >> $GITHUB_OUTPUT

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: ${{ env.BACKEND_IMAGE }}:${{ steps.tag.outputs.tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: ${{ env.FRONTEND_IMAGE }}:${{ steps.tag.outputs.tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Start EC2 instance
        run: |
          echo "🚀 Starting EC2 instance..."
          aws ec2 start-instances --instance-ids ${{ secrets.EC2_INSTANCE_ID }}
          echo "⏳ Waiting for instance to be running..."
          aws ec2 wait instance-running --instance-ids ${{ secrets.EC2_INSTANCE_ID }}
          echo "✅ EC2 instance is now running!"

      - name: Get EC2 public IP
        id: ec2-ip
        run: |
          PUBLIC_IP=$(aws ec2 describe-instances \
            --instance-ids ${{ secrets.EC2_INSTANCE_ID }} \
            --query 'Reservations[0].Instances[0].PublicIpAddress' \
            --output text)
          echo "ip=$PUBLIC_IP" >> $GITHUB_OUTPUT
          echo "🌐 EC2 Public IP: $PUBLIC_IP"

      - name: Wait for SSH to be ready
        run: |
          echo "🔗 Waiting for SSH to be ready..."
          for i in {1..30}; do
            if ssh -o ConnectTimeout=5 -o StrictHostKeyChecking=no -i <(echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}") ${{ secrets.EC2_USER }}@${{ steps.ec2-ip.outputs.ip }} exit 2>/dev/null; then
              echo "✅ SSH is ready!"
              break
            fi
            echo "⏳ Attempt $i/30 - SSH not ready yet, waiting 10 seconds..."
            sleep 10
          done

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          timeout: 300s
          script: |
            set -e

            echo "Starting deployment on EC2..."

            PROJECT_DIR=~/Movie-Recommender

            if [ ! -d "$PROJECT_DIR" ]; then
              echo "Cloning repository..."
              git clone https://github.com/${{ github.repository }} "$PROJECT_DIR"
            fi

            cd "$PROJECT_DIR"

            echo "Writing .env file..."
            cat > .env <<EOF
            MONGO_ROOT_USERNAME=${{ secrets.MONGO_ROOT_USERNAME }}
            MONGO_ROOT_PASSWORD=${{ secrets.MONGO_ROOT_PASSWORD }}
            MONGO_DATABASE=moviedb
            SECRET_KEY=${{ secrets.SECRET_KEY }}
            EOF

            echo "Stopping and cleaning up existing containers..."
            docker-compose down --remove-orphans || true
            
            echo "Cleaning up unused images..."
            docker image prune -af || true

            echo "Pulling latest images..."
            docker-compose pull || true

            echo "Starting new containers..."
            docker-compose up -d 

            echo "Checking container status..."
            docker-compose ps

            echo "Backend logs (20 lines)"
            docker-compose logs --tail=20 backend || true

            echo "Frontend logs (20 lines)"
            docker-compose logs --tail=20 frontend || true

            echo "MongoDB logs (20 lines)"
            docker-compose logs --tail=20 mongodb || true

            echo "✅ Deployment completed!"