name: CI/CD Pipeline

on:
  push: 
    branches: [main, develop]
  pull_request:
    branches: [main]

env: 
  REGISTRY: docker.io
  BACKEND_IMAGE: davidh248/movie-backend
  FRONTEND_IMAGE: davidh248/movie-frontend

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
          
      - name: Set image tag
        id: tag
        run: echo "tag=${{ github.ref == 'refs/heads/main' && 'latest' || 'develop' }}" >> $GITHUB_OUTPUT
        
      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: ${{ env.BACKEND_IMAGE }}:${{ steps.tag.outputs.tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: ${{ env.FRONTEND_IMAGE }}:${{ steps.tag.outputs.tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          timeout: 300s
          script: |
            set -e  # Exit on any error
            
            echo "Starting deployment process..."
            cd ~/Movie-Recommender
            
            # Create environment file
            echo "Creating environment file..."
            cat > .env << EOF
            MONGO_ROOT_USERNAME=${{ secrets.MONGO_ROOT_USERNAME }}
            MONGO_ROOT_PASSWORD=${{ secrets.MONGO_ROOT_PASSWORD }}
            MONGO_DATABASE=moviedb
            SECRET_KEY=${{ secrets.SECRET_KEY }}
            EOF
            
            # Stop existing containers and clean up
            echo "Stopping existing containers..."
            docker compose down --volumes --remove-orphans || true
            
            # Remove old images to free up space
            echo "Cleaning up old images..."
            docker image prune -f || true
            
            # Pull latest images
            echo "Pulling latest images..."
            docker compose pull
            
            # Start services
            echo "Starting services..."
            docker compose up -d --force-recreate
            
            # Wait a bit for services to start
            echo "Waiting for services to start..."
            sleep 30
            
            # Check service status
            echo "Checking service status..."
            docker compose ps
            
            # Show logs for troubleshooting (last 20 lines of each service)
            echo "=== MongoDB Logs ==="
            docker compose logs --tail=20 mongodb || true
            echo "=== Backend Logs ==="
            docker compose logs --tail=20 backend || true
            echo "=== Frontend Logs ==="
            docker compose logs --tail=20 frontend || true
            
            # Verify containers are running
            if ! docker compose ps | grep -q "Up"; then
              echo "ERROR: Some containers failed to start"
              docker compose logs
              exit 1
            fi
            
            echo "Deployment completed successfully!"
            
      - name: Health Check
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          timeout: 60s
          script: |
            # Wait a bit more for full startup
            sleep 15
            
            # Check if backend is responding
            echo "Checking backend health..."
            if curl -f http://localhost:5001/api/health 2>/dev/null; then
              echo "✅ Backend is healthy"
            else
              echo "❌ Backend health check failed"
            fi
            
            # Check if frontend is responding
            echo "Checking frontend health..."
            if curl -f http://localhost:8501 2>/dev/null; then
              echo "✅ Frontend is healthy"
            else
              echo "❌ Frontend health check failed"
            fi
            
            # Final container status
            echo "Final container status:"
            docker compose ps
